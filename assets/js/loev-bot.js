(function(){
  'use strict';
  
  // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ DOM
  document.addEventListener('DOMContentLoaded', function() {
    initBot();
  });
  
  function initBot() {
    var form = document.getElementById('loev-bot-form');
    var promptEl = document.getElementById('prompt');
    var genBtn = document.getElementById('gen-btn');
    var clearBtn = document.getElementById('clear-btn');
    var statusEl = document.getElementById('status');
    var cardsHost = document.getElementById('bot-cards');
    var loadingEl = document.getElementById('loading');
    
    console.log('Bot elements found:', {
      form: !!form,
      promptEl: !!promptEl,
      genBtn: !!genBtn,
      clearBtn: !!clearBtn,
      statusEl: !!statusEl,
      cardsHost: !!cardsHost,
      loadingEl: !!loadingEl
    });
    
    if (!form || !promptEl || !genBtn || !clearBtn || !statusEl || !cardsHost || !loadingEl) {
      console.error('Some bot elements not found!');
      return;
    }
    
    function setStatus(msg, type = 'info'){ 
      if(statusEl){ 
        statusEl.textContent = msg || ''; 
        statusEl.className = 'status ' + type;
        statusEl.style.display = msg ? 'block' : 'none';
      } 
    }

    function showLoading(show) {
      if(loadingEl) {
        if(show) {
          loadingEl.style.display = 'block';
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
          loadingEl.offsetHeight;
          loadingEl.classList.add('show');
          // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Å–ø–∏–Ω–Ω–µ—Ä –∫—Ä—É—Ç–∏—Ç—Å—è
          var spinner = loadingEl.querySelector('.loading-spinner');
          if(spinner) {
            spinner.style.animation = 'spin 1s linear infinite';
          }
        } else {
          loadingEl.classList.remove('show');
          // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
          setTimeout(() => {
            if(!loadingEl.classList.contains('show')) {
              loadingEl.style.display = 'none';
            }
          }, 300);
        }
      }
    }

    function escapeHtml(s){ if(typeof s!=='string') return s; return s.replace(/[&<>"']/g,function(c){return ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;','\'':'&#39;'}[c]);}); }
    function loadSnippets(){ return fetch('../assets/data/post_examples.json',{cache:'no-store'}).then(function(r){return r.json();}).catch(function(){return null;}); }

    function detectNiche(prompt){
      var p=(prompt||'').toLowerCase();
      if(p.indexOf('–∫–æ—Ñ–µ')>=0||p.indexOf('–∫–æ—Ñ–µ–π')>=0||p.indexOf('coffee')>=0) return '–∫–æ—Ñ–µ–π–Ω—è';
      if(p.indexOf('–±–∞–Ω–∫')>=0||p.indexOf('—Ñ–∏–Ω–∞–Ω—Å')>=0) return '–±–∞–Ω–∫';
      if(p.indexOf('—Å–µ–∫–æ–Ω–¥')>=0||p.indexOf('second')>=0) return '—Å–µ–∫–æ–Ω–¥‚Äë—Ö–µ–Ω–¥';
      if(p.indexOf('—à–æ—É')>=0||p.indexOf('showroom')>=0||p.indexOf('—à–æ—É—Ä—É–º')>=0) return '—à–æ—É—Ä—É–º';
      if(p.indexOf('–¥–∏–∑–∞–π–Ω')>=0||p.indexOf('–±—Ä–µ–Ω–¥')>=0) return '—Å—Ç—É–¥–∏—è –¥–∏–∑–∞–π–Ω–∞';
      return null;
    }

    function pickSnippets(data, prompt){ var key=detectNiche(prompt); var arr=(key && data && data.niches && data.niches[key])? data.niches[key] : []; return arr.slice(0,2).map(function(x){return JSON.stringify(x);}).join('\n'); }

    function buildPrompt(userPrompt, snippets){
      var niche=detectNiche(userPrompt)||'—É–∫–∞–∑–∞–Ω–Ω–∞—è –Ω–∏—à–∞';
      var exemplarsHeader='–≠–¢–ê–õ–û–ù–´ (–¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–∞ –ø–æ —Å—Ç–∏–ª—é/–ø–ª–æ—Ç–Ω–æ—Å—Ç–∏, –Ω–µ –∫–æ–ø–∏—Ä—É–π):\n';
      var rules=[
        '–ù–ò–®–ê: '+niche+'. –°—Ç—Ä–æ–≥–æ –ø–∏—à–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ —ç—Ç—É –Ω–∏—à—É.',
        '–ï—Å–ª–∏ –Ω–∏—à–∞ –Ω–µ ¬´—Å—Ç—É–¥–∏—è –¥–∏–∑–∞–π–Ω–∞¬ª, –∑–∞–ø—Ä–µ—â–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞—Ç—å ¬´—Å—Ç—É–¥–∏—é –¥–∏–∑–∞–π–Ω–∞¬ª, ¬´–¥–∏–∑–∞–π–Ω-—Å—Ç—É–¥–∏—é¬ª –∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏.',
        '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —è–≤–Ω–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç –Ω–∏—à—É: –≤–∫–ª—é—á–∏ —Å–ª–æ–≤–æ ¬´'+niche+'¬ª.',
        '1000‚Äì1200 –∑–Ω–∞–∫–æ–≤. –ñ–∏–≤–æ–π, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –≤–æ–¥—ã.',
        '–°—Ç—Ä—É–∫—Ç—É—Ä–∞: –≤–≤–µ–¥–µ–Ω–∏–µ ‚Üí –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å ‚Üí –≤—ã–≤–æ–¥ ‚Üí CTA.',
        '–ó–∞–ø—Ä–µ—Ç: FAQ-—Å–ø–∏—Å–∫–∏, –æ–±—â–∏–µ ¬´—Å–æ–≤–µ—Ç—ã –ø–æ –≤–∏–∑—É–∞–ª—É¬ª, –ø—É—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ –æ—Ç–≤–µ—Ç–æ–≤.',
        '–ë–µ–∑ –∫–µ–π—Å–æ–≤/–∫–æ–º–ø–∞–Ω–∏–π; —Ç–æ–ª—å–∫–æ –æ–±—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã, –≥–æ–¥ ‚Äî 2025.'
      ].join('\n- ');
      return (
        '–¢—ã –ø–∏—à–µ—à—å –ø–æ—Å—Ç—ã –¥–ª—è –±–∏–∑–Ω–µ—Å–∞. –¢–æ–Ω: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π.\n' +
        '- ' + rules + '\n\n' +
        exemplarsHeader + (snippets||'') + '\n\n' +
        '–û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ JSON. –ü–æ–ª—è: structured{title,annotation,intro,body[],outro,cta}, post (string) ‚Äî —Ü–µ–ª—å–Ω—ã–π –≥–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–ª—é—á–µ–π –∏ –ø–æ–º–µ—Ç–æ–∫.\n' +
        '–í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏ structured –∏ post –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –≤–Ω–µ JSON.'
      );
    }

    function composeFromStructured(obj){ if(!obj||typeof obj!=='object') return ''; var parts=[]; if(obj.title){ parts.push((obj.title||'').toString().trim()); } if(obj.annotation){ parts.push((obj.annotation||'').toString().trim()); } if(obj.intro){ parts.push((obj.intro||'').toString().trim()); } if(Array.isArray(obj.body)&&obj.body.length){ parts.push(obj.body.map(function(p){ return p&&p.toString?p.toString().trim():''; }).filter(Boolean).join('\n\n')); } if(obj.outro){ parts.push((obj.outro||'').toString().trim()); } if(obj.cta){ parts.push((obj.cta||'').toString().trim()); } return parts.filter(Boolean).join('\n\n'); }

    function looksLikeStructuredString(s){ if(typeof s!=='string') return false; return /\{\s*"(title|intro|annotation|body|outro|cta)"/i.test(s); }

    function renderCards(plan){
      if(!cardsHost) return;
      var days = ['–ü–Ω','–í—Ç','–°—Ä','–ß—Ç','–ü—Ç','–°–±'];
      cardsHost.innerHTML = '';
      
      console.log('Rendering cards with plan:', plan);
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º 6 –∫–∞—Ä—Ç–æ—á–µ–∫
      for(var i=0;i<6;i++){
        var item = plan && plan[i] ? plan[i] : {};
        var day = item.day || days[i];
        var topic = item.topic || '–¢–µ–º–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞';
        var format = item.format || '–ü–æ—Å—Ç';
        var post = item.post || item.draft || '';
        var structured = item.structured || null;
        var cta = item.cta || '';
        var tips = item.tips || '';
        // –ï—Å–ª–∏ tips - –æ–±—ä–µ–∫—Ç, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        if (typeof tips === 'object' && tips !== null) {
          if (Array.isArray(tips)) {
            tips = tips.join(', ');
          } else {
            tips = JSON.stringify(tips);
          }
        }
        var visual = item.visual_idea || '';
        // –ï—Å–ª–∏ visual_idea - –æ–±—ä–µ–∫—Ç, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ
        if (typeof visual === 'object' && visual !== null) {
          if (Array.isArray(visual)) {
            visual = visual.join(', ');
          } else {
            // –ü–∞—Ä—Å–∏–º JSON –æ–±—ä–µ–∫—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ
            try {
              var parsed = JSON.parse(visual);
              var formatted = '';
              if (parsed.text) formatted += '–¢–µ–∫—Å—Ç: ' + parsed.text + '\n\n';
              if (parsed.colors) formatted += '–¶–≤–µ—Ç: ' + parsed.colors.join(', ') + '\n\n';
              if (parsed.fonts) formatted += '–®—Ä–∏—Ñ—Ç: ' + parsed.fonts.join(', ') + '\n\n';
              if (parsed.elements) formatted += '–≠–ª–µ–º–µ–Ω—Ç—ã: ' + parsed.elements.join(', ') + '\n\n';
              if (parsed.composition) formatted += '–ö–æ–º–ø–æ–∑–∏—Ü–∏—è: ' + parsed.composition;
              visual = formatted || visual;
            } catch(e) {
              visual = JSON.stringify(visual);
            }
          }
        }
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–≤—å—é –¥–ª—è –ª–æ–≥–æ–≤
        var previewSrc = (typeof post === 'string') ? post : JSON.stringify(post||'');
        var preview = (previewSrc || '').toString().substring(0, 50) + '...';
        console.log('Day', i+1, ':', {day: day, topic: topic, format: format, post: preview});

        var card = document.createElement('div');
        card.className = 'content-card';
        
        var cardHTML = ''+
          '<div class="card-header">'+
            '<div class="day-badge">'+day+'</div>'+
            '<div class="format-badge">'+format+'</div>'+
          '</div>'+
          '<h3 class="card-title">'+escapeHtml(topic)+'</h3>'+
          '<div class="card-content">';
          
        if(structured && typeof structured === 'object'){
          cardHTML += '<div class="post-text">'+ escapeHtml(composeFromStructured(structured)) +'</div>';
        } else {
          cardHTML += '<div class="post-text"></div>';
        }
        cardHTML += '</div>';
        
        // –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ –∏–¥–µ—è–º–∏
        // if(visual) {
        //   cardHTML += '<div class="visual-section">'+
        //     '<div class="visual-label">üé® –î–∏–∑–∞–π–Ω –±–∞–Ω–Ω–µ—Ä–∞</div>'+
        //     '<div class="visual-text">'+visual+'</div>'+
        //   '</div>';
        // }
        
        if(tips) {
          cardHTML += '<div class="tips-section">'+
            '<div class="tips-label">üí° –°–æ–≤–µ—Ç—ã –¥–ª—è SMM</div>'+
            '<div class="tips-text">'+tips+'</div>'+
          '</div>';
        }
        
        cardHTML += '<div class="card-actions">'+
          '<button class="copy-btn" data-copy>üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç</button>'+
          '</div>';
        
        card.innerHTML = cardHTML;
        cardsHost.appendChild(card);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
        var textEl = card.querySelector('.post-text');
        if(textEl && !structured){
          var finalText='';
          if(typeof post==='object' && post){
            finalText=composeFromStructured(post);
          } else if(looksLikeStructuredString(post)){
            try{
              var parsed=JSON.parse(post);
              finalText=composeFromStructured(parsed);
            }catch(_){
              finalText=(post||'').toString();
            }
          } else {
            finalText=(typeof post==='string')?post:'';
          }
          textEl.textContent=finalText;
        }
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∑–∞–º—ã–∫–∞–Ω–∏–µ–º
        var copyBtn = card.querySelector('[data-copy]');
        if(copyBtn) {
          (function(buttonElement, textElement) {
            buttonElement.addEventListener('click', function(){
              var textToCopy = textElement ? textElement.textContent : '';
              if(textToCopy && textToCopy !== '–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω') {
                navigator.clipboard.writeText(textToCopy).then(function(){
                  var originalText = buttonElement.innerHTML;
                  buttonElement.innerHTML = '‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
                  buttonElement.disabled = true;
                  setTimeout(function(){
                    buttonElement.innerHTML = originalText;
                    buttonElement.disabled = false;
                  }, 2000);
                }).catch(function(){
                  setStatus('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
                });
              } else {
                setStatus('–ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è', 'error');
              }
            });
          })(copyBtn, textEl);
        }
      }
    }

    function validatePlan(plan){
      if(!Array.isArray(plan)) return false;
      var ok=false;
      for(var i=0;i<plan.length;i++){
        var it=plan[i]||{};
        if(it.structured && typeof it.structured==='object'){
          var s=it.structured;
          if(s.title && s.annotation && s.intro && Array.isArray(s.body) && s.body.length>=3 && s.outro){
            ok=true;
            break;
          }
        } else if(it.post){
          ok=true;
        }
      }
      return ok;
    }

    function generate(){
      if(!promptEl || !promptEl.value.trim()) {
        setStatus('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏', 'error');
        return;
      }
      
      setStatus('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω...', 'info');
      showLoading(true);
      genBtn.disabled = true;
      
      console.log('Sending request to API...');
      // –¢–∞–π–º–∞—É—Ç –∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –≤–∏—Å–ª–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
      var controller = new AbortController();
      var timeoutId = setTimeout(function(){ controller.abort(); }, 25000);
      
      loadSnippets().then(function(db){
        var snippets=pickSnippets(db,promptEl.value.trim());
        var composedPrompt=buildPrompt(promptEl.value.trim(),snippets);
        return fetch('https://loev-bot.loevdesign.workers.dev/api/loev-bot', {
          method: 'POST',
          mode: 'cors',
          cache: 'no-store',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            prompt: composedPrompt
          }),
          signal: controller.signal
        });
      })
      .then(function(response) {
        console.log('Response status:', response.status);
        if (!response.ok) {
          throw new Error('HTTP ' + response.status);
        }
        return response.json();
      })
      .then(function(data) {
        console.log('Response data:', data);
        
        if(data.error) {
          throw new Error(data.message || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
        }
        
        var plan=Array.isArray(data.plan)?data.plan:null;
        if(!plan || !validatePlan(plan)) throw new Error('–°–ª–∞–±–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞');

        if(plan && Array.isArray(plan)) {
          renderCards(plan);
          setStatus('–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –≥–æ—Ç–æ–≤!', 'success');
        } else {
          throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞');
        }
      })
      .catch(function(error) {
        console.error('Generation error:', error);
        var message = '–û—à–∏–±–∫–∞: ' + (error && error.message ? error.message : 'Failed to fetch');
        // –ë–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ç–∏–ø–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        if(String(error).includes('Failed to fetch') || String(error.name) === 'AbortError'){
          message = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ –∞–¥—Ä–µ—Å—É http/https (–Ω–µ file://). –í–æ–∑–º–æ–∂–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ CORS/—Å–µ—Ç–µ–≤—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ.';
        }
        setStatus(message, 'error');
      })
      .finally(function(){
        clearTimeout(timeoutId);
        showLoading(false);
        genBtn.disabled = false;
      });
    }

    // –ê–≤—Ç–æ—Ä–∞–∑–º–µ—Ä textarea
    function autoResizeTextarea(textarea) {
      textarea.style.height = 'auto';
      textarea.style.height = Math.min(textarea.scrollHeight, 300) + 'px';
    }

    if(promptEl) {
      promptEl.addEventListener('input', function() {
        autoResizeTextarea(this);
      });
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
      autoResizeTextarea(promptEl);
    }

    if(form) {
      form.addEventListener('submit', function(e) {
        e.preventDefault();
        generate();
      });
    }

    if(clearBtn) {
      clearBtn.addEventListener('click', function() {
        if(promptEl) promptEl.value = '';
        if(cardsHost) cardsHost.innerHTML = '';
        setStatus('');
        showLoading(false);
      });
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    setStatus('');
    showLoading(false);
  }
})();